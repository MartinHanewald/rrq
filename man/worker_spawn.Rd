% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/worker_spawn.R
\name{worker_spawn}
\alias{worker_spawn}
\title{Spawn a worker}
\usage{
worker_spawn(context, con, n = 1, logdir = ".", timeout = 20,
  time_poll = 1, path = ".", worker_name_base = NULL)
}
\arguments{
\item{context}{A context handle object.  The context needs to be loaded.}

\item{con}{A redis connection (redux object).}

\item{n}{Number of workers to spawn}

\item{logdir}{Path of a log directory to write to.}

\item{timeout}{Time to wait for the worker to appear}

\item{time_poll}{Period to poll for the worker (must be in
seconds)}

\item{path}{Path to start the worker in.  By default workers will
start in the current working directory, but you can start them
elsewhere by providing a path here.  If the path does not exist,
an error will be thrown.  If \code{n} is greater than 1, all
workers will start in the same working directory.  The
\code{logfile} argument will be interpreted relative to current
working directory (not the worker working directory); use
\code{\link{normalizePath}} to convert into an absolute path
name to prevent this.}

\item{worker_name_base}{Optional base to construct the worker
names from.  If omitted a random name will be used.}
}
\description{
Spawn a worker in the background
}
\details{
Spawning multiple workers.  If \code{n} is greater than one,
multiple workers will be spawned.  This happens in parallel so it
does not take n times longer than spawing a single worker.

Beware that signals like Ctrl-C passed to \emph{this} R instance
can still propagate to the child processes and can result in them
dying unexpectedly.  It is probably safer to start processes in a
standalone session.
}

